(function() {
  //'use strict';
var pageId = 'c3H4ab5z1x5yuIlxicylaicy39zJiCL93lsdicJ9zq19KCI3IkdiSdOhPQkaiAe3';

//######### DATA-SET ##########
var sessionStorageSet = "no";
var localStorageSet = "no";
var localforageSet = "no";
var superCookiesSet = "no";
var everCookiesSet = "no";
//######### DATA-SET ##########


//######### UNIQUE-KEYS ##########
var canvas1 = 'no';
var canvas2 = 'no';
var privateUserIp = 'no';
var webgl = 'no';
//######### UNIQUE-KEYS ##########


//######### STORAGE-DATA ###########
var sessionStorage_returnId = '';
var sessionStorage_lastVisitedDate = '';
var localStorage_returnId = '';
var localStorage_lastVisitedDate = '';
var localforage_returnId = '';
var localforage_lastVisitedDate = '';
var superCookies_returnId = '';
var superCookies_lastVisitedDate = '';
var everCookies_returnId = '';
var everCookies_lastVisitedDate = '';
//######### STORAGE-DATA ###########


//######### FINGERPRINT-DATA ###########
var fingerPrintData;
//######### FINGERPRINT-DATA ###########
/*
var ec = new evercookie({
    baseurl: '', 
    asseturi: '', 
    phpuri: '' 
});*/

$(document).ready(function() {
  $.when( getFingerprint() ).done(function() {
   $.when( webRTC() ).done(function() {
  $.when( checkLocalforage() ).done(function() {
   setTimeout(function() {
      checkEverCookies();
    }, 2000);
 });
  });
});
});

function executeFunctions() {
  checkSessionStorage();
  checkLocalStorage();
  webGL();
  checkSuperCookies();   
  uniqueKeys();
}

function checkSessionStorage() {
   if (typeof(Storage) !== "undefined") {
 
    storageSupport = "yes";
    //sessionStorage.clear();
if (sessionStorage.getItem(pageId) == null) {
    sessionStorageSet = 'no';
}
else {
    if (sessionStorage.getItem(pageId).indexOf('html') > -1) {
        sessionStorageSet = 'no';
    }
    else {
    var result = JSON.parse(decodeURIComponent(sessionStorage.getItem(pageId)));
    if (result) {
        var sessionStorage_bef_returnId = result['returnId'];
        var sessionStorage_bef_visitedDate = result['lastVisitedDate'];

     if (sessionStorage_bef_returnId === undefined || sessionStorage_bef_visitedDate === undefined) {
        sessionStorageSet = "no";
     }
     else {
      sessionStorageSet = "set";

       sessionStorage_returnId = sessionStorage_bef_returnId;
       sessionStorage_lastVisitedDate = sessionStorage_bef_visitedDate;
     }
    }
    else {
        sessionStorageSet = "no";
    }
    }
  } 
  } else {
    sessionStorageSet = "no";
   }
  }

 function checkLocalStorage() {
    if (typeof(Storage) !== "undefined") {
     // localStorage.clear();
     storageSupport = "yes";
if (localStorage.getItem(pageId) == null) {
    localStorageSet = 'no';
}
else {
    if (localStorage.getItem(pageId).indexOf('html') > -1) {
        localStorageSet = 'no';
    }
    else {
     var result = JSON.parse(decodeURIComponent(localStorage.getItem(pageId)));
    if (result) {
        var localStorage_bef_returnId = result['returnId'];
        var localStorage_bef_visitedDate = result['lastVisitedDate'];

     if (localStorage_bef_returnId == undefined || localStorage_bef_visitedDate === undefined) {
        localStorageSet = "no";
     }
     else {
         localStorageSet = "set";
         localStorage_returnId = localStorage_bef_returnId;
         localStorage_lastVisitedDate = localStorage_bef_visitedDate;
     }
    }
    else {
        localStorageSet = "no";
    }
   }
}
}
  else {
    localStorageSet = "no";
  }
  } 

  function checkLocalforage() {
    //localforage.clear();
    localforage.getItem(pageId).then(function(value) {
        if (value === null) {
          localforageSet = "no";
        }
        else {
            var result = JSON.parse(value);
            var localforage_bef_returnId = result['returnId'];
            var localforage_bef_visitedDate = result['lastVisitedDate'];
            if (localforage_bef_returnId == undefined || localforage_bef_visitedDate === undefined) {
              localforageSet = "no";
           }
           else {
             localforageSet = "set";
             localforage_returnId = localforage_bef_returnId;
             localforage_lastVisitedDate = localforage_bef_visitedDate;
           }
        }
      
    });
}

function checkSuperCookies() { 
    var super_cookie_exist = $.super_cookie().check(pageId);
    if (super_cookie_exist == true) {
        superCookiesSet = "set";
        superCookies_returnId = $.super_cookie().read_value(pageId, 'returnId');
        superCookies_lastVisitedDate = $.super_cookie().read_value(pageId, 'lastVisitedDate');   
    }
    else {
       superCookiesSet = "no";
    }
 }

function checkEverCookies() {
    /*
    ec.get(pageId, function(value) {
     
      if (value !== undefined) {
             if (value.indexOf('html') > -1) {
            everCookiesSet = "no"; 
        }
        else {
        var everCookie = JSON.parse(decodeURIComponent(value));
        if (value === undefined) {
            everCookiesSet = "no"; 
        }
        else if(everCookie['returnId'] == undefined) { 
            everCookiesSet = "no"; 
        }
        else {
            everCookiesSet = "set";
            everCookies_returnId = everCookie['returnId'];
            everCookies_lastVisitedDate = everCookie['lastVisitedDate'];
        }
      }
      }
      else {
        everCookiesSet = "no";  
      }
    });*/
      $.when( executeFunctions() ).done(function() {
           fetchInfo();
     }); 
}


function getFingerprint(){
    if (window.requestIdleCallback) {
        requestIdleCallback(function () {
            Fingerprint2.get(function (components) {
              fingerPrintData = components;
            })
        })
        } else {
        setTimeout(function () {
            Fingerprint2.get(function (components) {
              fingerPrintData = components;
            })  
        }, 500)
          }
}

function uniqueKeys() {
var getUniqueKeys = {
    canvasFingerprint1: function() {
      var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    var txt = 'articles.sabiduria';
    ctx.textBaseline = "top";
    ctx.font = "16px 'Arial'";
    ctx.textBaseline = "alphabetic";
    ctx.rotate(.05);
    ctx.fillStyle = "#f60";
    ctx.fillRect(125,1,62,20);
    ctx.fillStyle = "#069";
    ctx.fillText(txt, 2, 15);
    ctx.fillStyle = "rgba(102, 200, 0, 0.7)";
    ctx.fillText(txt, 4, 17);
    ctx.shadowBlur=10;
    ctx.shadowColor="blue";
    ctx.fillRect(-20,10,234,5);
    var strng=canvas.toDataURL();
  
  document.body.appendChild(canvas);    
    
    var hash=0;
    if (strng.length==0) 
        return 'nothing!';
    for (var i = 0; i < strng.length; i++) {
    var char = strng.charCodeAt(i);
    hash = ((hash<<5)-hash)+char;
    hash = hash & hash;
  }
  return hash;
  }, 
  
   canvasFingerprint2: function() {
    var canvas = document.createElement('canvas');
    var ctx = canvas.getContext('2d');
    var txt = 'sabiduria.trackuser';
    ctx.textBaseline = "top";
    ctx.font = "16px 'Arial'";
    ctx.textBaseline = "alphabetic";
    ctx.rotate(.05);
    ctx.fillStyle = "#f60";
    ctx.fillRect(125,1,62,20);
    ctx.fillStyle = "#069";
    ctx.fillText(txt, 2, 15);
    ctx.fillStyle = "rgba(102, 200, 0, 0.7)";
    ctx.fillText(txt, 4, 17);
    ctx.shadowBlur=10;
    ctx.shadowColor="blue";
    ctx.fillRect(-20,10,234,5);
    var strng=canvas.toDataURL();
  
  document.body.appendChild(canvas);    
    
    var hash=0;
    if (strng.length==0) 
        return 'nothing!';
    for (var i = 0; i < strng.length; i++) {
    var char = strng.charCodeAt(i);
    hash = ((hash<<5)-hash)+char;
    hash = hash & hash;
  }
  return hash;
  }
  }
  canvas1 = getUniqueKeys.canvasFingerprint1();
  canvas2 = getUniqueKeys.canvasFingerprint2();
}


function getUserIP(onNewIP) { //  onNewIp - your listener function for new IPs
  //compatibility for firefox and chrome
  var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
  var pc = new myPeerConnection({
      iceServers: []
  }),
  noop = function() {},
  localIPs = {},
  ipRegex = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/g,
  key;

  function iterateIP(ip) {
      if (!localIPs[ip]) onNewIP(ip);
      localIPs[ip] = true;
  }

     //create a bogus data channel

var isIE = /*@cc_on!@*/false || !!document.documentMode;
// Edge 20+
var isEdge = !isIE && !!window.StyleMedia;

    if(isIE || isEdge ||(navigator.userAgent.indexOf("MSIE") != -1 ) || (!!document.documentMode == true )) {
    }
    else  {
          pc.createDataChannel("");  
    }  
    

  // create offer and set local description
  pc.createOffer(function(sdp) {
      sdp.sdp.split('\n').forEach(function(line) {
          if (line.indexOf('candidate') < 0) return;
          line.match(ipRegex).forEach(iterateIP);
      });
      
      pc.setLocalDescription(sdp, noop, noop);
  }, noop); 

  //listen for candidate events
  pc.onicecandidate = function(ice) {
      if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;
      ice.candidate.candidate.match(ipRegex).forEach(iterateIP);
  };
}

// Usage
function webRTC() {
          var isIE = /*@cc_on!@*/false || !!document.documentMode;
      if (!isIE) {
  getUserIP(function(ip){
    privateUserIp = ip;
     
  });
      }
}

function webGL(){
	var canvas, ctx, width = 256, height = 128;
  canvas = document.body.appendChild(document.createElement("canvas"));
//  canvas.style.display = "none";
  canvas.width = width,
  canvas.height = height,
  ctx = canvas.getContext("webgl2") || canvas.getContext("experimental-webgl2") || canvas.getContext("webgl") || canvas.getContext("experimental-webgl") || canvas.getContext("moz-webgl");

	try {
		var f = "attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}";
		var g = "precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}";
		var h = ctx.createBuffer();

		ctx.bindBuffer(ctx.ARRAY_BUFFER, h);

		var i = new Float32Array([-.2, -.9, 0, .4, -.26, 0, 0, .7321, 0]);

		ctx.bufferData(ctx.ARRAY_BUFFER, i, ctx.STATIC_DRAW), h.itemSize = 3, h.numItems = 3;

		var j = ctx.createProgram();
		var k = ctx.createShader(ctx.VERTEX_SHADER);

		ctx.shaderSource(k, f);
		ctx.compileShader(k);

		var l = ctx.createShader(ctx.FRAGMENT_SHADER);

		ctx.shaderSource(l, g);
		ctx.compileShader(l);
		ctx.attachShader(j, k);
		ctx.attachShader(j, l);
		ctx.linkProgram(j);
		ctx.useProgram(j);

		j.vertexPosAttrib = ctx.getAttribLocation(j, "attrVertex");
		j.offsetUniform = ctx.getUniformLocation(j, "uniformOffset");

		ctx.enableVertexAttribArray(j.vertexPosArray);
		ctx.vertexAttribPointer(j.vertexPosAttrib, h.itemSize, ctx.FLOAT, !1, 0, 0);
		ctx.uniform2f(j.offsetUniform, 1, 1);
		ctx.drawArrays(ctx.TRIANGLE_STRIP, 0, h.numItems);

	}
	catch (e) {	}

	var m = "";

  var n = new Uint8Array(width * height * 4);
  ctx.readPixels(0, 0, width, height, ctx.RGBA, ctx.UNSIGNED_BYTE, n);
  m = JSON.stringify(n).replace(/,?"[0-9]+":/g, "");


//document.body.appendChild(document.createElement('br'));
//document.body.appendChild(document.createTextNode(sha256(m)));
webgl = $.trim(sha256(m));
}

var sha256 = (function(){

  // Eratosthenes seive to find primes up to 311 for magic constants. This is why SHA256 is better than SHA1
  var i = 1,
      j,
      K = [],
      H = [];

  while(++i < 18){
    for(j = i * i; j < 312; j += i){
      K[j] = 1;
    }
  }

  function x(num, root){
    return (Math.pow(num, 1 / root) % 1) * 4294967296|0;
  }

  for(i = 1, j = 0; i < 313; ){
    if(!K[++i]){
      H[j] = x(i,2);
      K[j++] = x(i,3);
    }
  }

  function S (X, n) { return ( X >>> n ) | (X << (32 - n)); }

  function SHA256(b){
    var HASH = H.slice(i = 0),
        s = unescape(encodeURI(b)), 
        W = [],
        l = s.length,
        m = [],
        a, y, z;
    for(; i < l; ) m[i >> 2] |= (s.charCodeAt(i) & 0xff) << 8 * (3 - i++ % 4);

    l *= 8;

    m[l >> 5] |= 0x80 << (24 - l % 32);
    m[z = (l + 64 >> 5) | 15] = l;

    for(i = 0; i < z; i += 16){
      a = HASH.slice(j = 0, 8);

      for(; j < 64; a[4] += y){
        if(j < 16){
          W[j] = m[j + i];
        }else{
          W[j] =
            (S(y = W[j - 2], 17) ^ S(y, 19) ^ (y >>> 10)) +
            (W[j - 7]|0) +
            (S(y = W[j - 15], 7) ^ S(y, 18) ^ (y >>> 3)) +
            (W[j - 16]|0);
        }

        a.unshift(
          (
            y = (
              a.pop() +
              (S(b = a[4], 6) ^ S(b, 11) ^ S(b, 25)) +
              (((b & a[5]) ^ ((~b) & a[6])) + K[j])|0
            ) +
            (W[j++]|0)
          ) +
          (S(l = a[0], 2) ^ S(l, 13) ^ S(l, 22)) +
          ((l & a[1]) ^ (a[1] & a[2]) ^ (a[2] & l))
        );
      }

      for(j = 8; j--; ) HASH[j] = a[j] + HASH[j];
    }

    for(s = ''; j < 63; ) s += ((HASH[++j >> 3] >> 4 * (7 - j % 8)) & 15).toString(16);

    return s;
  }

  return SHA256;
})();

function fetchInfo() {
   console.log(fingerPrintData);
    $.ajax({
        type: 'POST',
        url: 'https://sabiduria.in/tracker/Do-you-think-you-know-more-about-your-device-than-we-know/sabiduriatracker.php',
        data: {
            'pageId': $.trim(pageId),
            'sessionStorageSet': $.trim(sessionStorageSet),
            'localStorageSet': $.trim(localStorageSet),
            'localforageSet': $.trim(localforageSet),
            'superCookiesSet': $.trim(superCookiesSet),
            'everCookiesSet': $.trim(everCookiesSet),
            'fingerPrintData': fingerPrintData,
            'canvas1': $.trim(canvas1),
            'canvas2': $.trim(canvas2),
            'webgl': $.trim(webgl),
            'privateUserIp': $.trim(privateUserIp),
            'sessionStorage_returnId': $.trim(sessionStorage_returnId),
            'sessionStorage_lastVisitedDate': $.trim(sessionStorage_lastVisitedDate),
            'localStorage_returnId': $.trim(localStorage_returnId),
            'localStorage_lastVisitedDate': $.trim(localStorage_lastVisitedDate),
            'localforage_returnId': $.trim(localforage_returnId),
            'localforage_lastVisitedDate': $.trim(localforage_lastVisitedDate),
            'superCookies_returnId': $.trim(superCookies_returnId),
            'superCookies_lastVisitedDate': $.trim(superCookies_lastVisitedDate),
            'everCookies_returnId': $.trim(everCookies_returnId),
            'everCookies_lastVisitedDate': $.trim(everCookies_lastVisitedDate)
        }, 
        success: function(bef_data) {
            var data = $.trim(bef_data);
            $("#total_page").html(data);
        }
    });
}
})();

$(document).ready(function() {
   move();
  var facts_arr = [];
  facts_arr[0] = "Vanilla flavoring is sometimes made with the urine of beavers.";
  facts_arr[1] = "Iceland does not have a railway station.";

var rand = facts_arr[Math.floor(Math.random() * facts_arr.length)];
$("#facts_para").html(rand);
});

function move() {
  var elem = document.getElementById("myBar");   
  var width = 10;
  var id = setInterval(frame, 200);
  function frame() {
    if (width >= 100) {
      clearInterval(id);
    } else {
      width++; 
      elem.style.width = width + '%'; 
      elem.innerHTML = width * 1  + '%';
    }
  }
}

 $(document).ready(function() {
   $("#share_btn").on('click', function() {
      $("#total_social_icons").css("display", "block");
   });
 });

 $(document).ready(function() {
   $("#close_share").on('click', function() {
      $("#total_social_icons").css("display", "none");
   });
 });

